name: Check for new n8n releases

on:
  # 每小時的第 15 分鐘執行一次
  schedule:
    - cron: "15 * * * *"
  # 也允許手動觸發，方便測試
  workflow_dispatch:

jobs:
  check-and-commit:
    runs-on: ubuntu-latest
    
    # 關鍵點 1: 明確授權 workflow 對儲存庫的寫入權限
    # 這是為了解決之前遇到的 403 Forbidden 推送錯誤
    permissions:
      contents: write

    steps:
      # 步驟一：Checkout 程式碼
      # 由於上面已設定 permissions，這裡不再需要 PAT
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 使用 PAT 來 checkout，這樣後續的 push 就會使用 PAT 進行驗證
          # 這是觸發其他 workflow 的關鍵
          token: ${{ secrets.PAT }}

      # 步驟二：獲取最新的 n8n 版本號
      - name: Fetch latest n8n release version
        id: fetch-version
        run: |
          # 關鍵點 2: 在 API 請求中加入 PAT 進行驗證，以避免觸發 API 頻率限制
          RAW_VERSION=$(curl -sL -H "Authorization: Bearer ${{ secrets.PAT }}" https://api.github.com/repos/n8n-io/n8n/releases/latest | jq -r '.tag_name')
          
          # 如果獲取失敗，則退出
          if [ -z "$RAW_VERSION" ]; then
            echo "Failed to fetch latest version. Exiting."
            exit 1
          fi

          # 新增：移除 'n8n@' 前綴以獲取純淨的版本號
          LATEST_VERSION=${RAW_VERSION#n8n@}

          mkdir -p release-versions
          echo "${LATEST_VERSION}" > release-versions/n8n-latest.txt
          
          echo "Latest n8n version is: ${LATEST_VERSION}"
          echo "version=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      # 步驟三：如果文件內容有變更，則自動提交並推送
      - name: Commit and push if changed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          # 使用上一步的輸出，建立清晰的提交訊息
          commit_message: "chore(release): Update n8n to version ${{ steps.fetch-version.outputs.version }}"
          
          # 指定要監控變化的檔案
          file_pattern: release-versions/n8n-latest.txt
          
          # 自定義提交者資訊
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
